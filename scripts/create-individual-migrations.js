#!/usr/bin/env node

/**
 * Script t·ª± ƒë·ªông t·∫°o migration ri√™ng bi·ªát cho t·ª´ng entity
 * Thay v√¨ t·∫°o m·ªôt file migration l·ªõn ch·ª©a t·∫•t c·∫£ b·∫£ng,
 * script n√†y s·∫Ω t·∫°o nhi·ªÅu file migration nh·ªè, m·ªói file cho m·ªôt b·∫£ng
 */

const fs = require('fs');
const path = require('path');

// Danh s√°ch c√°c entity v√† th√¥ng tin b·∫£ng t∆∞∆°ng ·ª©ng
const entities = [
  {
    name: 'Users',
    tableName: 'users',
    description: 'T·∫°o b·∫£ng users - th√¥ng tin ng∆∞·ªùi d√πng'
  },
  {
    name: 'UserProfiles', 
    tableName: 'user_profiles',
    description: 'T·∫°o b·∫£ng user_profiles - th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng'
  },
  {
    name: 'ProductTypes',
    tableName: 'product_types', 
    description: 'T·∫°o b·∫£ng product_types - lo·∫°i s·∫£n ph·∫©m'
  },
  {
    name: 'ProductSubtypes',
    tableName: 'product_subtypes',
    description: 'T·∫°o b·∫£ng product_subtypes - lo·∫°i ph·ª• s·∫£n ph·∫©m'
  },
  {
    name: 'Products',
    tableName: 'products',
    description: 'T·∫°o b·∫£ng products - th√¥ng tin s·∫£n ph·∫©m'
  },
  {
    name: 'ProductSubtypeRelations',
    tableName: 'product_subtype_relations',
    description: 'T·∫°o b·∫£ng product_subtype_relations - quan h·ªá s·∫£n ph·∫©m v√† lo·∫°i ph·ª•'
  },
  {
    name: 'Inventories',
    tableName: 'inventories',
    description: 'T·∫°o b·∫£ng inventories - l√¥ h√†ng t·ªìn kho'
  },
  {
    name: 'InventoryTransactions',
    tableName: 'inventory_transactions',
    description: 'T·∫°o b·∫£ng inventory_transactions - giao d·ªãch kho'
  },
  {
    name: 'InventoryReceipts',
    tableName: 'inventory_receipts',
    description: 'T·∫°o b·∫£ng inventory_receipts - phi·∫øu nh·∫≠p kho'
  },
  {
    name: 'InventoryReceiptItems',
    tableName: 'inventory_receipt_items',
    description: 'T·∫°o b·∫£ng inventory_receipt_items - chi ti·∫øt phi·∫øu nh·∫≠p kho'
  },
  {
    name: 'SalesInvoices',
    tableName: 'sales_invoices',
    description: 'T·∫°o b·∫£ng sales_invoices - h√≥a ƒë∆°n b√°n h√†ng'
  },
  {
    name: 'SalesInvoiceItems',
    tableName: 'sales_invoice_items',
    description: 'T·∫°o b·∫£ng sales_invoice_items - chi ti·∫øt h√≥a ƒë∆°n b√°n h√†ng'
  },
  {
    name: 'FileUploads',
    tableName: 'file_uploads',
    description: 'T·∫°o b·∫£ng file_uploads - th√¥ng tin file upload'
  },
  {
    name: 'FileReferences',
    tableName: 'file_references',
    description: 'T·∫°o b·∫£ng file_references - tham chi·∫øu file'
  }
];

// Th∆∞ m·ª•c ch·ª©a migration
const migrationsDir = path.join(__dirname, '..', 'src', 'database', 'migrations');

// T·∫°o th∆∞ m·ª•c migrations n·∫øu ch∆∞a t·ªìn t·∫°i
if (!fs.existsSync(migrationsDir)) {
  fs.mkdirSync(migrationsDir, { recursive: true });
}

// H√†m t·∫°o timestamp cho migration
function generateTimestamp() {
  return Date.now();
}

// H√†m t·∫°o n·ªôi dung migration
function createMigrationContent(entityName, tableName, description, timestamp) {
  const className = `Create${entityName}${timestamp}`;
  
  return `import { MigrationInterface, QueryRunner } from 'typeorm';

/**
 * ${description}
 * Migration ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi script create-individual-migrations.js
 */
export class ${className} implements MigrationInterface {
  name = '${className}';

  public async up(queryRunner: QueryRunner): Promise<void> {
    // TODO: Th√™m SQL CREATE TABLE cho b·∫£ng ${tableName}
    // B·∫°n c·∫ßn copy SQL t·ª´ file InitialSchema.ts t∆∞∆°ng ·ª©ng v·ªõi b·∫£ng n√†y
    console.log('Creating table ${tableName}...');
    
    // V√≠ d·ª•:
    // await queryRunner.query(\`
    //   CREATE TABLE "${tableName}" (
    //     "id" SERIAL NOT NULL,
    //     "created_at" TIMESTAMP NOT NULL DEFAULT now(),
    //     "updated_at" TIMESTAMP NOT NULL DEFAULT now(),
    //     CONSTRAINT "PK_${tableName}" PRIMARY KEY ("id")
    //   )
    // \`);
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    console.log('Dropping table ${tableName}...');
    await queryRunner.query(\`DROP TABLE "${tableName}"\`);
  }
}
`;
}

// T·∫°o migration cho t·ª´ng entity
function createIndividualMigrations() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o migration ri√™ng bi·ªát cho t·ª´ng entity...');
  
  let baseTimestamp = generateTimestamp();
  
  entities.forEach((entity, index) => {
    // TƒÉng timestamp ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª± ch·∫°y migration
    const timestamp = baseTimestamp + (index * 1000);
    const fileName = `${timestamp}-Create${entity.name}.ts`;
    const filePath = path.join(migrationsDir, fileName);
    
    const content = createMigrationContent(
      entity.name,
      entity.tableName,
      entity.description,
      timestamp
    );
    
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`‚úÖ ƒê√£ t·∫°o migration: ${fileName}`);
  });
  
  console.log('\nüéâ Ho√†n th√†nh t·∫°o t·∫•t c·∫£ migration!');
  console.log('\nüìù L∆∞u √Ω:');
  console.log('1. B·∫°n c·∫ßn copy SQL CREATE TABLE t·ª´ file InitialSchema.ts v√†o t·ª´ng migration t∆∞∆°ng ·ª©ng');
  console.log('2. X√≥a file InitialSchema.ts sau khi copy xong');
  console.log('3. Ch·∫°y migration: npm run migration:run');
}

// Ch·∫°y script
if (require.main === module) {
  createIndividualMigrations();
}

module.exports = { createIndividualMigrations };