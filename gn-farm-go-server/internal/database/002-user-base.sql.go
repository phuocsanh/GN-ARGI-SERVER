// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 002-user-base.sql

package database

import (
	"context"
	"database/sql"
)

const addUserBase = `-- name: AddUserBase :one
INSERT INTO users (
    user_account, user_password, user_salt, user_created_at, user_updated_at
) VALUES (
    $1, $2, $3, NOW(), NOW()
)
RETURNING user_id
`

type AddUserBaseParams struct {
	UserAccount  string `json:"userAccount"`
	UserPassword string `json:"userPassword"`
	UserSalt     string `json:"userSalt"`
}

func (q *Queries) AddUserBase(ctx context.Context, arg AddUserBaseParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, addUserBase, arg.UserAccount, arg.UserPassword, arg.UserSalt)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const checkUserBaseExists = `-- name: CheckUserBaseExists :one
SELECT COUNT(*)
FROM users
WHERE user_account = $1
`

func (q *Queries) CheckUserBaseExists(ctx context.Context, userAccount string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserBaseExists, userAccount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getOneUserInfo = `-- name: GetOneUserInfo :one
SELECT user_id, user_account, user_password, user_salt
FROM users
WHERE user_account = $1
`

type GetOneUserInfoRow struct {
	UserID       int32  `json:"userId"`
	UserAccount  string `json:"userAccount"`
	UserPassword string `json:"userPassword"`
	UserSalt     string `json:"userSalt"`
}

func (q *Queries) GetOneUserInfo(ctx context.Context, userAccount string) (GetOneUserInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getOneUserInfo, userAccount)
	var i GetOneUserInfoRow
	err := row.Scan(
		&i.UserID,
		&i.UserAccount,
		&i.UserPassword,
		&i.UserSalt,
	)
	return i, err
}

const getOneUserInfoAdmin = `-- name: GetOneUserInfoAdmin :one
SELECT user_id, user_account, user_password, user_salt, user_login_time, user_logout_time, user_login_ip
        ,user_created_at, user_updated_at
FROM users
WHERE user_account = $1
`

type GetOneUserInfoAdminRow struct {
	UserID         int32          `json:"userId"`
	UserAccount    string         `json:"userAccount"`
	UserPassword   string         `json:"userPassword"`
	UserSalt       string         `json:"userSalt"`
	UserLoginTime  sql.NullTime   `json:"userLoginTime"`
	UserLogoutTime sql.NullTime   `json:"userLogoutTime"`
	UserLoginIp    sql.NullString `json:"userLoginIp"`
	UserCreatedAt  sql.NullTime   `json:"userCreatedAt"`
	UserUpdatedAt  sql.NullTime   `json:"userUpdatedAt"`
}

func (q *Queries) GetOneUserInfoAdmin(ctx context.Context, userAccount string) (GetOneUserInfoAdminRow, error) {
	row := q.db.QueryRowContext(ctx, getOneUserInfoAdmin, userAccount)
	var i GetOneUserInfoAdminRow
	err := row.Scan(
		&i.UserID,
		&i.UserAccount,
		&i.UserPassword,
		&i.UserSalt,
		&i.UserLoginTime,
		&i.UserLogoutTime,
		&i.UserLoginIp,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
	)
	return i, err
}

const loginUserBase = `-- name: LoginUserBase :exec
UPDATE users
SET user_login_time = NOW(), user_login_ip = $1
WHERE user_account = $2 AND user_password = $3
`

type LoginUserBaseParams struct {
	UserLoginIp  sql.NullString `json:"userLoginIp"`
	UserAccount  string         `json:"userAccount"`
	UserPassword string         `json:"userPassword"`
}

func (q *Queries) LoginUserBase(ctx context.Context, arg LoginUserBaseParams) error {
	_, err := q.db.ExecContext(ctx, loginUserBase, arg.UserLoginIp, arg.UserAccount, arg.UserPassword)
	return err
}

const logoutUserBase = `-- name: LogoutUserBase :exec
UPDATE users
SET user_logout_time = NOW()
WHERE user_account = $1
`

func (q *Queries) LogoutUserBase(ctx context.Context, userAccount string) error {
	_, err := q.db.ExecContext(ctx, logoutUserBase, userAccount)
	return err
}
