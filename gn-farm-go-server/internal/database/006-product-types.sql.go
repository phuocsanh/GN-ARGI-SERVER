// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 006-product-types.sql

package database

import (
	"context"
	"database/sql"
)

const createProductType = `-- name: CreateProductType :one
INSERT INTO product_types (
    name,
    description,
    image_url
) VALUES (
    $1, $2, $3
) RETURNING id, name, description, created_at, updated_at, image_url
`

type CreateProductTypeParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	ImageUrl    sql.NullString `json:"imageUrl"`
}

func (q *Queries) CreateProductType(ctx context.Context, arg CreateProductTypeParams) (ProductType, error) {
	row := q.db.QueryRowContext(ctx, createProductType, arg.Name, arg.Description, arg.ImageUrl)
	var i ProductType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageUrl,
	)
	return i, err
}

const deleteProductType = `-- name: DeleteProductType :exec
DELETE FROM product_types WHERE id = $1
`

func (q *Queries) DeleteProductType(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProductType, id)
	return err
}

const getProductType = `-- name: GetProductType :one
SELECT id, name, description, created_at, updated_at, image_url FROM product_types WHERE id = $1
`

func (q *Queries) GetProductType(ctx context.Context, id int32) (ProductType, error) {
	row := q.db.QueryRowContext(ctx, getProductType, id)
	var i ProductType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageUrl,
	)
	return i, err
}

const listProductTypes = `-- name: ListProductTypes :many
SELECT id, name, description, created_at, updated_at, image_url FROM product_types ORDER BY id
`

func (q *Queries) ListProductTypes(ctx context.Context) ([]ProductType, error) {
	rows, err := q.db.QueryContext(ctx, listProductTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductType
	for rows.Next() {
		var i ProductType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductType = `-- name: UpdateProductType :one
UPDATE product_types
SET
    name = $2,
    description = $3,
    image_url = $4,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, created_at, updated_at, image_url
`

type UpdateProductTypeParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	ImageUrl    sql.NullString `json:"imageUrl"`
}

func (q *Queries) UpdateProductType(ctx context.Context, arg UpdateProductTypeParams) (ProductType, error) {
	row := q.db.QueryRowContext(ctx, updateProductType,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
	)
	var i ProductType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageUrl,
	)
	return i, err
}
