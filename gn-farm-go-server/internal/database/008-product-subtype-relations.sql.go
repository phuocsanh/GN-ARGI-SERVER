// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 008-product-subtype-relations.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const addProductSubtypeRelation = `-- name: AddProductSubtypeRelation :exec
INSERT INTO product_subtype_relations (
    product_id,
    product_subtype_id
) VALUES (
    $1, $2
) ON CONFLICT (product_id, product_subtype_id) DO NOTHING
`

type AddProductSubtypeRelationParams struct {
	ProductID        int32 `json:"productId"`
	ProductSubtypeID int32 `json:"productSubtypeId"`
}

func (q *Queries) AddProductSubtypeRelation(ctx context.Context, arg AddProductSubtypeRelationParams) error {
	_, err := q.db.ExecContext(ctx, addProductSubtypeRelation, arg.ProductID, arg.ProductSubtypeID)
	return err
}

const getProductSubtypeRelations = `-- name: GetProductSubtypeRelations :many
SELECT psr.product_id, psr.product_subtype_id, psr.created_at, ps.name as subtype_name, ps.description as subtype_description
FROM product_subtype_relations psr
JOIN product_subtypes ps ON psr.product_subtype_id = ps.id
WHERE psr.product_id = $1
`

type GetProductSubtypeRelationsRow struct {
	ProductID          int32          `json:"productId"`
	ProductSubtypeID   int32          `json:"productSubtypeId"`
	CreatedAt          time.Time      `json:"createdAt"`
	SubtypeName        string         `json:"subtypeName"`
	SubtypeDescription sql.NullString `json:"subtypeDescription"`
}

func (q *Queries) GetProductSubtypeRelations(ctx context.Context, productID int32) ([]GetProductSubtypeRelationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductSubtypeRelations, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductSubtypeRelationsRow
	for rows.Next() {
		var i GetProductSubtypeRelationsRow
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductSubtypeID,
			&i.CreatedAt,
			&i.SubtypeName,
			&i.SubtypeDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllProductSubtypeRelations = `-- name: RemoveAllProductSubtypeRelations :exec
DELETE FROM product_subtype_relations 
WHERE product_id = $1
`

func (q *Queries) RemoveAllProductSubtypeRelations(ctx context.Context, productID int32) error {
	_, err := q.db.ExecContext(ctx, removeAllProductSubtypeRelations, productID)
	return err
}

const removeProductSubtypeRelation = `-- name: RemoveProductSubtypeRelation :exec
DELETE FROM product_subtype_relations 
WHERE product_id = $1 AND product_subtype_id = $2
`

type RemoveProductSubtypeRelationParams struct {
	ProductID        int32 `json:"productId"`
	ProductSubtypeID int32 `json:"productSubtypeId"`
}

func (q *Queries) RemoveProductSubtypeRelation(ctx context.Context, arg RemoveProductSubtypeRelationParams) error {
	_, err := q.db.ExecContext(ctx, removeProductSubtypeRelation, arg.ProductID, arg.ProductSubtypeID)
	return err
}
