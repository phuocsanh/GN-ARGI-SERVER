// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 007-product-subtypes.sql

package database

import (
	"context"
	"database/sql"
)

const addProductSubtypeMapping = `-- name: AddProductSubtypeMapping :exec
INSERT INTO product_subtype_mappings (
    product_type_id,
    product_subtype_id
) VALUES (
    $1, $2
) ON CONFLICT (product_type_id, product_subtype_id) DO NOTHING
`

type AddProductSubtypeMappingParams struct {
	ProductTypeID    int32 `json:"productTypeId"`
	ProductSubtypeID int32 `json:"productSubtypeId"`
}

func (q *Queries) AddProductSubtypeMapping(ctx context.Context, arg AddProductSubtypeMappingParams) error {
	_, err := q.db.ExecContext(ctx, addProductSubtypeMapping, arg.ProductTypeID, arg.ProductSubtypeID)
	return err
}

const createProductSubtype = `-- name: CreateProductSubtype :one
INSERT INTO product_subtypes (
    name,
    description
) VALUES (
    $1, $2
) RETURNING id, name, description, created_at, updated_at
`

type CreateProductSubtypeParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateProductSubtype(ctx context.Context, arg CreateProductSubtypeParams) (ProductSubtype, error) {
	row := q.db.QueryRowContext(ctx, createProductSubtype, arg.Name, arg.Description)
	var i ProductSubtype
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProductSubtype = `-- name: DeleteProductSubtype :exec
DELETE FROM product_subtypes WHERE id = $1
`

func (q *Queries) DeleteProductSubtype(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProductSubtype, id)
	return err
}

const getProductSubtype = `-- name: GetProductSubtype :one
SELECT id, name, description, created_at, updated_at FROM product_subtypes WHERE id = $1
`

func (q *Queries) GetProductSubtype(ctx context.Context, id int32) (ProductSubtype, error) {
	row := q.db.QueryRowContext(ctx, getProductSubtype, id)
	var i ProductSubtype
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProductSubtypes = `-- name: ListProductSubtypes :many
SELECT id, name, description, created_at, updated_at FROM product_subtypes ORDER BY id
`

func (q *Queries) ListProductSubtypes(ctx context.Context) ([]ProductSubtype, error) {
	rows, err := q.db.QueryContext(ctx, listProductSubtypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductSubtype
	for rows.Next() {
		var i ProductSubtype
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductSubtypesByType = `-- name: ListProductSubtypesByType :many
SELECT ps.id, ps.name, ps.description, ps.created_at, ps.updated_at FROM product_subtypes ps
JOIN product_subtype_mappings psm ON ps.id = psm.product_subtype_id
WHERE psm.product_type_id = $1
ORDER BY ps.id
`

func (q *Queries) ListProductSubtypesByType(ctx context.Context, productTypeID int32) ([]ProductSubtype, error) {
	rows, err := q.db.QueryContext(ctx, listProductSubtypesByType, productTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductSubtype
	for rows.Next() {
		var i ProductSubtype
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProductSubtypeMapping = `-- name: RemoveProductSubtypeMapping :exec
DELETE FROM product_subtype_mappings 
WHERE product_type_id = $1 AND product_subtype_id = $2
`

type RemoveProductSubtypeMappingParams struct {
	ProductTypeID    int32 `json:"productTypeId"`
	ProductSubtypeID int32 `json:"productSubtypeId"`
}

func (q *Queries) RemoveProductSubtypeMapping(ctx context.Context, arg RemoveProductSubtypeMappingParams) error {
	_, err := q.db.ExecContext(ctx, removeProductSubtypeMapping, arg.ProductTypeID, arg.ProductSubtypeID)
	return err
}

const updateProductSubtype = `-- name: UpdateProductSubtype :one
UPDATE product_subtypes
SET 
    name = $2,
    description = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, created_at, updated_at
`

type UpdateProductSubtypeParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateProductSubtype(ctx context.Context, arg UpdateProductSubtypeParams) (ProductSubtype, error) {
	row := q.db.QueryRowContext(ctx, updateProductSubtype, arg.ID, arg.Name, arg.Description)
	var i ProductSubtype
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
