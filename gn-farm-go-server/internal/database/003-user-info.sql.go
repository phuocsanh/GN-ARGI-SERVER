// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 003-user-info.sql

package database

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const addUserAutoUserId = `-- name: AddUserAutoUserId :execresult



INSERT INTO user_profiles (
    user_account, user_nickname, user_avatar, user_state, user_mobile,
    user_gender, user_birthday, user_email, user_is_authentication
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type AddUserAutoUserIdParams struct {
	UserAccount          string         `json:"userAccount"`
	UserNickname         sql.NullString `json:"userNickname"`
	UserAvatar           sql.NullString `json:"userAvatar"`
	UserState            int16          `json:"userState"`
	UserMobile           sql.NullString `json:"userMobile"`
	UserGender           sql.NullInt16  `json:"userGender"`
	UserBirthday         sql.NullTime   `json:"userBirthday"`
	UserEmail            sql.NullString `json:"userEmail"`
	UserIsAuthentication int16          `json:"userIsAuthentication"`
}

// -- name: UpdatePassword :exec
// UPDATE user_profiles SET user_password = $1 WHERE user_id = $2;
func (q *Queries) AddUserAutoUserId(ctx context.Context, arg AddUserAutoUserIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUserAutoUserId,
		arg.UserAccount,
		arg.UserNickname,
		arg.UserAvatar,
		arg.UserState,
		arg.UserMobile,
		arg.UserGender,
		arg.UserBirthday,
		arg.UserEmail,
		arg.UserIsAuthentication,
	)
}

const addUserHaveUserId = `-- name: AddUserHaveUserId :execresult
INSERT INTO user_profiles (
    user_id, user_account, user_nickname, user_avatar, user_state, user_mobile,
    user_gender, user_birthday, user_email, user_is_authentication
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type AddUserHaveUserIdParams struct {
	UserID               int64          `json:"userId"`
	UserAccount          string         `json:"userAccount"`
	UserNickname         sql.NullString `json:"userNickname"`
	UserAvatar           sql.NullString `json:"userAvatar"`
	UserState            int16          `json:"userState"`
	UserMobile           sql.NullString `json:"userMobile"`
	UserGender           sql.NullInt16  `json:"userGender"`
	UserBirthday         sql.NullTime   `json:"userBirthday"`
	UserEmail            sql.NullString `json:"userEmail"`
	UserIsAuthentication int16          `json:"userIsAuthentication"`
}

func (q *Queries) AddUserHaveUserId(ctx context.Context, arg AddUserHaveUserIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUserHaveUserId,
		arg.UserID,
		arg.UserAccount,
		arg.UserNickname,
		arg.UserAvatar,
		arg.UserState,
		arg.UserMobile,
		arg.UserGender,
		arg.UserBirthday,
		arg.UserEmail,
		arg.UserIsAuthentication,
	)
}

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM user_profiles
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsersWithSearch = `-- name: CountUsersWithSearch :one
SELECT COUNT(*) FROM user_profiles WHERE user_account LIKE $1 OR user_nickname LIKE $2
`

type CountUsersWithSearchParams struct {
	UserAccount  string         `json:"userAccount"`
	UserNickname sql.NullString `json:"userNickname"`
}

func (q *Queries) CountUsersWithSearch(ctx context.Context, arg CountUsersWithSearchParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsersWithSearch, arg.UserAccount, arg.UserNickname)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const editUserByUserId = `-- name: EditUserByUserId :execresult
UPDATE user_profiles
SET user_nickname = $1, user_avatar = $2, user_mobile = $3,
user_gender = $4, user_birthday = $5, user_email = $6, updated_at = NOW()
WHERE user_id = $7 AND user_is_authentication = 1
`

type EditUserByUserIdParams struct {
	UserNickname sql.NullString `json:"userNickname"`
	UserAvatar   sql.NullString `json:"userAvatar"`
	UserMobile   sql.NullString `json:"userMobile"`
	UserGender   sql.NullInt16  `json:"userGender"`
	UserBirthday sql.NullTime   `json:"userBirthday"`
	UserEmail    sql.NullString `json:"userEmail"`
	UserID       int64          `json:"userId"`
}

func (q *Queries) EditUserByUserId(ctx context.Context, arg EditUserByUserIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, editUserByUserId,
		arg.UserNickname,
		arg.UserAvatar,
		arg.UserMobile,
		arg.UserGender,
		arg.UserBirthday,
		arg.UserEmail,
		arg.UserID,
	)
}

const findUsers = `-- name: FindUsers :many
SELECT user_id, user_account, user_nickname, user_avatar, user_state, user_mobile, user_gender, user_birthday, user_email, user_is_authentication, created_at, updated_at FROM user_profiles WHERE user_account LIKE $1 OR user_nickname LIKE $2
`

type FindUsersParams struct {
	UserAccount  string         `json:"userAccount"`
	UserNickname sql.NullString `json:"userNickname"`
}

func (q *Queries) FindUsers(ctx context.Context, arg FindUsersParams) ([]UserProfile, error) {
	rows, err := q.db.QueryContext(ctx, findUsers, arg.UserAccount, arg.UserNickname)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserProfile
	for rows.Next() {
		var i UserProfile
		if err := rows.Scan(
			&i.UserID,
			&i.UserAccount,
			&i.UserNickname,
			&i.UserAvatar,
			&i.UserState,
			&i.UserMobile,
			&i.UserGender,
			&i.UserBirthday,
			&i.UserEmail,
			&i.UserIsAuthentication,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT
    user_id,
    user_account,
    user_nickname,
    user_avatar,
    user_state,
    user_mobile,
    user_gender,
    user_birthday,
    user_email,
    user_is_authentication,
    created_at,
    updated_at
FROM user_profiles
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i UserProfile
	err := row.Scan(
		&i.UserID,
		&i.UserAccount,
		&i.UserNickname,
		&i.UserAvatar,
		&i.UserState,
		&i.UserMobile,
		&i.UserGender,
		&i.UserBirthday,
		&i.UserEmail,
		&i.UserIsAuthentication,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT user_id,
    user_account,
    user_nickname,
    user_avatar,
    user_state,
    user_mobile,
    user_gender,
    user_birthday,
    user_email,
    user_is_authentication,
    created_at,
    updated_at
FROM user_profiles
WHERE user_id = ANY($1::bigint[])
`

func (q *Queries) GetUsers(ctx context.Context, dollar_1 []int64) ([]UserProfile, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserProfile
	for rows.Next() {
		var i UserProfile
		if err := rows.Scan(
			&i.UserID,
			&i.UserAccount,
			&i.UserNickname,
			&i.UserAvatar,
			&i.UserState,
			&i.UserMobile,
			&i.UserGender,
			&i.UserBirthday,
			&i.UserEmail,
			&i.UserIsAuthentication,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, user_account, user_nickname, user_avatar, user_state, user_mobile, user_gender, user_birthday, user_email, user_is_authentication, created_at, updated_at FROM user_profiles LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]UserProfile, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserProfile
	for rows.Next() {
		var i UserProfile
		if err := rows.Scan(
			&i.UserID,
			&i.UserAccount,
			&i.UserNickname,
			&i.UserAvatar,
			&i.UserState,
			&i.UserMobile,
			&i.UserGender,
			&i.UserBirthday,
			&i.UserEmail,
			&i.UserIsAuthentication,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersWithSearch = `-- name: ListUsersWithSearch :many
SELECT user_id, user_account, user_nickname, user_avatar, user_state, user_mobile, user_gender, user_birthday, user_email, user_is_authentication, created_at, updated_at FROM user_profiles WHERE user_account LIKE $1 OR user_nickname LIKE $2 LIMIT $3 OFFSET $4
`

type ListUsersWithSearchParams struct {
	UserAccount  string         `json:"userAccount"`
	UserNickname sql.NullString `json:"userNickname"`
	Limit        int32          `json:"limit"`
	Offset       int32          `json:"offset"`
}

func (q *Queries) ListUsersWithSearch(ctx context.Context, arg ListUsersWithSearchParams) ([]UserProfile, error) {
	rows, err := q.db.QueryContext(ctx, listUsersWithSearch,
		arg.UserAccount,
		arg.UserNickname,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserProfile
	for rows.Next() {
		var i UserProfile
		if err := rows.Scan(
			&i.UserID,
			&i.UserAccount,
			&i.UserNickname,
			&i.UserAvatar,
			&i.UserState,
			&i.UserMobile,
			&i.UserGender,
			&i.UserBirthday,
			&i.UserEmail,
			&i.UserIsAuthentication,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUser = `-- name: RemoveUser :exec
DELETE FROM user_profiles WHERE user_id = $1
`

func (q *Queries) RemoveUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, removeUser, userID)
	return err
}
