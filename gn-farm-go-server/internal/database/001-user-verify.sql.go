// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 001-user-verify.sql

package database

import (
	"context"
	"database/sql"
)

const getInfoOTP = `-- name: GetInfoOTP :one
SELECT verify_id, verify_otp, verify_key, verify_key_hash, verify_type, is_verified, is_deleted, verify_created_at, verify_updated_at
FROM user_verifications
WHERE verify_key_hash = $1
`

func (q *Queries) GetInfoOTP(ctx context.Context, verifyKeyHash string) (UserVerification, error) {
	row := q.db.QueryRowContext(ctx, getInfoOTP, verifyKeyHash)
	var i UserVerification
	err := row.Scan(
		&i.VerifyID,
		&i.VerifyOtp,
		&i.VerifyKey,
		&i.VerifyKeyHash,
		&i.VerifyType,
		&i.IsVerified,
		&i.IsDeleted,
		&i.VerifyCreatedAt,
		&i.VerifyUpdatedAt,
	)
	return i, err
}

const getOTPByVerifyKey = `-- name: GetOTPByVerifyKey :one
SELECT COUNT(*)
FROM user_verifications
WHERE verify_key = $1
`

func (q *Queries) GetOTPByVerifyKey(ctx context.Context, verifyKey string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getOTPByVerifyKey, verifyKey)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getValidOTP = `-- name: GetValidOTP :one
/*
USER VERIFICATION QUERIES - CÁC QUERY XÁC THỰC NGƯỜI DÙNG
File: 001-user-verify.sql

Mục đích:
- Xử lý OTP verification cho đăng ký tài khoản
- Quản lý trạng thái xác thực email/phone
- Theo dõi quá trình verification của người dùng

Các chức năng:
- Lấy OTP hợp lệ cho xác thực
- Cập nhật trạng thái đã xác thực
- Thêm OTP mới
- Kiểm tra thông tin OTP
- Cập nhật OTP theo verify key

Tác giả: GN Farm Development Team
*/

SELECT verify_otp, verify_key_hash, verify_key, verify_id
FROM user_verifications
WHERE verify_key_hash = $1 AND is_verified = 0
`

type GetValidOTPRow struct {
	VerifyOtp     string `json:"verifyOtp"`
	VerifyKeyHash string `json:"verifyKeyHash"`
	VerifyKey     string `json:"verifyKey"`
	VerifyID      int32  `json:"verifyId"`
}

// ####################################################################
// ####################################################################
func (q *Queries) GetValidOTP(ctx context.Context, verifyKeyHash string) (GetValidOTPRow, error) {
	row := q.db.QueryRowContext(ctx, getValidOTP, verifyKeyHash)
	var i GetValidOTPRow
	err := row.Scan(
		&i.VerifyOtp,
		&i.VerifyKeyHash,
		&i.VerifyKey,
		&i.VerifyID,
	)
	return i, err
}

const insertOTPVerify = `-- name: InsertOTPVerify :execresult
INSERT INTO user_verifications (
    verify_otp,
    verify_key,
    verify_key_hash,
    verify_type,
    is_verified,
    is_deleted,
    verify_created_at,
    verify_updated_at
)
VALUES ($1, $2, $3, $4, 0, 0, NOW(), NOW())
`

type InsertOTPVerifyParams struct {
	VerifyOtp     string        `json:"verifyOtp"`
	VerifyKey     string        `json:"verifyKey"`
	VerifyKeyHash string        `json:"verifyKeyHash"`
	VerifyType    sql.NullInt32 `json:"verifyType"`
}

func (q *Queries) InsertOTPVerify(ctx context.Context, arg InsertOTPVerifyParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertOTPVerify,
		arg.VerifyOtp,
		arg.VerifyKey,
		arg.VerifyKeyHash,
		arg.VerifyType,
	)
}

const updateOTPByVerifyKey = `-- name: UpdateOTPByVerifyKey :exec
UPDATE user_verifications
SET verify_otp = $1,
    verify_key_hash = $2,
    verify_type = $3,
    is_verified = 0,
    is_deleted = 0,
    verify_updated_at = NOW()
WHERE verify_key = $4
`

type UpdateOTPByVerifyKeyParams struct {
	VerifyOtp     string        `json:"verifyOtp"`
	VerifyKeyHash string        `json:"verifyKeyHash"`
	VerifyType    sql.NullInt32 `json:"verifyType"`
	VerifyKey     string        `json:"verifyKey"`
}

func (q *Queries) UpdateOTPByVerifyKey(ctx context.Context, arg UpdateOTPByVerifyKeyParams) error {
	_, err := q.db.ExecContext(ctx, updateOTPByVerifyKey,
		arg.VerifyOtp,
		arg.VerifyKeyHash,
		arg.VerifyType,
		arg.VerifyKey,
	)
	return err
}

const updateUserVerificationStatus = `-- name: UpdateUserVerificationStatus :exec
UPDATE user_verifications
SET is_verified = 1,
    verify_updated_at = now()
WHERE verify_key_hash = $1
`

// update lai
func (q *Queries) UpdateUserVerificationStatus(ctx context.Context, verifyKeyHash string) error {
	_, err := q.db.ExecContext(ctx, updateUserVerificationStatus, verifyKeyHash)
	return err
}
