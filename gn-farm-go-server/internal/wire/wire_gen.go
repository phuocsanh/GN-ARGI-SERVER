// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"database/sql"
	"github.com/google/wire"
	"gn-farm-go-server/global"
	inventory2 "gn-farm-go-server/internal/controller/inventory"
	sales2 "gn-farm-go-server/internal/controller/sales"
	"gn-farm-go-server/internal/database"
	"gn-farm-go-server/internal/service"
	"gn-farm-go-server/internal/service/impl/inventory"
	"gn-farm-go-server/internal/service/impl/product"
	"gn-farm-go-server/internal/service/impl/sales"
	"gn-farm-go-server/internal/service/impl/user"
)

// Injectors from inventory.wire.go:

func InitializeInventoryService(db *database.Queries) service.IInventoryService {
	iInventoryTransactionService := inventory.NewInventoryTransactionService(db)
	iInventoryService := inventory.NewInventoryService(db, iInventoryTransactionService)
	return iInventoryService
}

func InitializeInventoryTransactionService(db *database.Queries) service.IInventoryTransactionService {
	iInventoryTransactionService := inventory.NewInventoryTransactionService(db)
	return iInventoryTransactionService
}

func InitializeInventoryController(db *database.Queries) *inventory2.InventoryController {
	iInventoryTransactionService := inventory.NewInventoryTransactionService(db)
	iInventoryService := inventory.NewInventoryService(db, iInventoryTransactionService)
	inventoryController := inventory2.NewInventoryController(iInventoryService)
	return inventoryController
}

// Injectors from product-type.wire.go:

func InitializeProductTypeService(db *database.Queries) service.ProductTypeService {
	productTypeService := product.NewProductTypeService(db)
	return productTypeService
}

func InitializeProductSubtypeService(db *database.Queries) service.ProductSubtypeService {
	productSubtypeService := product.NewProductSubtypeService(db)
	return productSubtypeService
}

func InitializeProductSubtypeRelationService(db *database.Queries) service.ProductSubtypeRelationService {
	productSubtypeRelationService := product.NewProductSubtypeRelationService(db)
	return productSubtypeRelationService
}

// Injectors from product.wire.go:

func InitializeProductService(db *database.Queries) service.IProductService {
	iProductService := product.NewProductServiceImpl(db)
	return iProductService
}

func InitializeMushroomService(db *database.Queries) service.MushroomService {
	mushroomService := product.NewMushroomService(db)
	return mushroomService
}

func InitializeVegetableService(db *database.Queries) service.VegetableService {
	vegetableService := product.NewVegetableService(db)
	return vegetableService
}

func InitializeBonsaiService(db *database.Queries) service.BonsaiService {
	bonsaiService := product.NewBonsaiService(db)
	return bonsaiService
}

// Injectors from sales.wire.go:

func InitializeSalesService(db *database.Queries) service.ISalesService {
	iSalesService := sales.NewSalesService(db)
	return iSalesService
}

func InitializeSalesController(db *database.Queries) *sales2.SalesController {
	iSalesService := sales.NewSalesService(db)
	salesController := sales2.NewSalesController(iSalesService)
	return salesController
}

// Injectors from user.wire.go:

// Initialize only the necessary dependencies for UserAuth service registration
// This function might not need to return anything specific for the current router setup,
// as controllers access the service via global functions (service.UserAuth()).
// Returning an error ensures dependencies were built correctly.
func InitUserAuthService() (service.IUserAuth, error) {
	db := NewPostgresDB()
	queries := database.New(db)
	sUserAuth := user.NewUserAuthImpl(queries)
	return sUserAuth, nil
}

// inventory.wire.go:

var inventorySet = wire.NewSet(inventory.NewInventoryTransactionService, inventory.NewInventoryService, inventory2.NewInventoryController)

// product-type.wire.go:

var productTypeSet = wire.NewSet(product.NewProductTypeService, product.NewProductSubtypeService, product.NewProductSubtypeRelationService)

// product.wire.go:

var productSet = wire.NewSet(product.NewProductServiceImpl, product.NewMushroomService, product.NewVegetableService, product.NewBonsaiService)

// sales.wire.go:

var salesSet = wire.NewSet(sales.NewSalesService, sales2.NewSalesController)

// user.wire.go:

// Database provider set (Example - replace with your actual DB provider)
var dbProviderSet = wire.NewSet(
	NewPostgresDB, database.New, wire.Bind(new(database.DBTX), new(*sql.DB)),
)

// Service provider set for User Auth
var userAuthServiceSet = wire.NewSet(user.NewUserAuthImpl, wire.Bind(new(service.IUserAuth), new(*user.SUserAuth)))

// --- Helper function for DB (Example) ---
// You should have a proper way to provide your DB connection.
func NewPostgresDB() *sql.DB {

	if global.Pgdbc == nil {

		panic("global.Pgdbc is nil, ensure postgresc is initialized before wire")
	}
	return global.Pgdbc
}
